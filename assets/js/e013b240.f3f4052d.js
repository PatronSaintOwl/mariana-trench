"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[949],{33102:function(e,n,a){a.r(n),a.d(n,{frontMatter:function(){return d},contentTitle:function(){return l},metadata:function(){return c},toc:function(){return u},default:function(){return f}});var t,r=a(83117),o=a(80102),i=(a(67294),a(3905)),s=a(44256),m=["components"],d={id:"customize-sources-and-sinks",title:"Customize Sources and Sinks",sidebar_label:"Customize Sources and Sinks"},l=void 0,c={unversionedId:"customize-sources-and-sinks",id:"customize-sources-and-sinks",isDocsHomePage:!1,title:"Customize Sources and Sinks",description:"Overview",source:"@site/documentation/customize_sources_and_sinks.md",sourceDirName:".",slug:"/customize-sources-and-sinks",permalink:"/docs/customize-sources-and-sinks",editUrl:"https://github.com/facebook/mariana-trench/tree/main/documentation/website/documentation/customize_sources_and_sinks.md",tags:[],version:"current",frontMatter:{id:"customize-sources-and-sinks",title:"Customize Sources and Sinks",sidebar_label:"Customize Sources and Sinks"},sidebar:"docs",previous:{title:"Getting Started",permalink:"/docs/getting-started"},next:{title:"Models",permalink:"/docs/models"}},u=[{value:"Overview",id:"overview",children:[],level:2}],p=(t="FbCustomizeSourcesAndSinks",function(e){return console.warn("Component "+t+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.mdx)("div",e)}),h={toc:u};function f(e){var n=e.components,a=(0,o.Z)(e,m);return(0,i.mdx)("wrapper",(0,r.Z)({},h,a,{components:n,mdxType:"MDXLayout"}),(0,i.mdx)("h2",{id:"overview"},"Overview"),(0,i.mdx)("p",null,"Under the context of Mariana Trench, we talk about sources and sinks in terms of methods. For example, we may say that the return value of a method is a source (or a sink). We may also say that the 2nd parameter of a method is a source (or a sink). Such description of a method is called a ",(0,i.mdx)("strong",{parentName:"p"},'"model"'),". See ",(0,i.mdx)("a",{parentName:"p",href:"/docs/models"},"Models")," for more details about models and writing them."),(0,i.mdx)(s.FbInternalOnly,{mdxType:"FbInternalOnly"}," ",(0,i.mdx)(p,{mdxType:"FbCustomizeSourcesAndSinks"})," "),(0,i.mdx)(s.OssOnly,{mdxType:"OssOnly"},(0,i.mdx)("p",null,"To define sources or sinks that are not contained in the default set of ",(0,i.mdx)("a",{parentName:"p",href:"https://github.com/facebook/mariana-trench/tree/main/configuration/model-generators/sources"},"sources")," and ",(0,i.mdx)("a",{parentName:"p",href:"https://github.com/facebook/mariana-trench/tree/main/configuration/model-generators/sinks"},"sinks"),", a user needs to:"),(0,i.mdx)("ol",null,(0,i.mdx)("li",{parentName:"ol"},"Write one or more JSON files that respect our ",(0,i.mdx)("a",{parentName:"li",href:"/docs/models"},"model generator Domain Specific Language (DSL)"),", which express how to generate models from methods and are hence called  ",(0,i.mdx)("strong",{parentName:"li"},'"model generators"'),".",(0,i.mdx)("ul",{parentName:"li"},(0,i.mdx)("li",{parentName:"ul"},"For example, a model generator may say that, for all methods (that will be analyzed by Mariana Trench) whose name is ",(0,i.mdx)("inlineCode",{parentName:"li"},"onActivityResult"),", specify their 2nd parameter as a source.")),(0,i.mdx)("pre",{parentName:"li"},(0,i.mdx)("code",{parentName:"pre"},'{\n"model_generators": [\n    {\n    "find": "methods",\n    "where": [\n        {\n        "constraint": "name",\n        "pattern": "onActivityResult"\n        },\n    ],\n    "model": {\n        "sources": [\n        {\n            "kind": "TestSensitiveUserInput",\n            "port": "Argument(2)"\n        }\n        ]\n    }\n    }\n}\n'))),(0,i.mdx)("li",{parentName:"ol"},"Instruct Mariana Trench to read from your model generator, so that Mariana Trench will generate models at runtime.",(0,i.mdx)("ul",{parentName:"li"},(0,i.mdx)("li",{parentName:"ul"},"Intuitively, the models generated by interpreting model generators express sources and sinks of each method ",(0,i.mdx)("strong",{parentName:"li"},"before")," running Mariana Trench. Based on such models, Mariana Trench will automatically infer ",(0,i.mdx)("strong",{parentName:"li"},"new")," models for each method at runtime."),(0,i.mdx)("li",{parentName:"ul"},"To instruct Mariana Trench to read from customized JSON model generators, add your json model generator ",(0,i.mdx)("a",{parentName:"li",href:"https://github.com/facebook/mariana-trench/tree/main/configuration/model-generators"},"here"),"."),(0,i.mdx)("li",{parentName:"ul"},"Add the model generator name (i.e, the file name) in the ",(0,i.mdx)("a",{parentName:"li",href:"https://github.com/facebook/mariana-trench/blob/main/configuration/default_generator_config.json"},"JSON configuration file"),"."))),(0,i.mdx)("li",{parentName:"ol"},"Update ",(0,i.mdx)("strong",{parentName:"li"},'"rules"')," if necessary.",(0,i.mdx)("ul",{parentName:"li"},(0,i.mdx)("li",{parentName:"ul"},"Background: Mariana Trench categorizes sources and sinks into different ",(0,i.mdx)("strong",{parentName:"li"},'"kinds"'),", which are string-typed. For example, a source may have a kind of",(0,i.mdx)("inlineCode",{parentName:"li"},"JavascriptInterfaceUserInput"),". A sink may have a kind of ",(0,i.mdx)("inlineCode",{parentName:"li"},"Logging"),". Mariana Trench only finds data flow ",(0,i.mdx)("strong",{parentName:"li"},"from sources of a particular kind to sinks of another paritcular kind"),", which are called ",(0,i.mdx)("strong",{parentName:"li"},'"rules"'),"."),(0,i.mdx)("li",{parentName:"ul"},"To specify kinds that are not mentioned in the default set of rules or to specify rules that are different than the default rules, you need to specify a new rule in file ",(0,i.mdx)("a",{parentName:"li",href:"https://github.com/facebook/mariana-trench/blob/main/configuration/rules.json"},(0,i.mdx)("inlineCode",{parentName:"a"},"rules.json")),", in order to instruct Mariana Trench to find data flow that matches the new rule."),(0,i.mdx)("li",{parentName:"ul"},"For example, to catch flows from ",(0,i.mdx)("inlineCode",{parentName:"li"},"TestSensitiveUserInput")," in the example above and the sink kind ",(0,i.mdx)("inlineCode",{parentName:"li"},"Logging"),", you can add the following rule to the default ",(0,i.mdx)("a",{parentName:"li",href:"https://github.com/facebook/mariana-trench/blob/main/configuration/rules.json"},(0,i.mdx)("inlineCode",{parentName:"a"},"rules.json")),":")),(0,i.mdx)("pre",{parentName:"li"},(0,i.mdx)("code",{parentName:"pre"},'{\n"name": "TestRule",\n"code": 18,\n"description": "A test rule",\n"sources": [\n    "TestSensitiveUserInput"\n],\n"sinks": [\n    "Logging"\n]\n}\n'))))))}f.isMDXComponent=!0}}]);